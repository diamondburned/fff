#!/usr/bin/env bash
#
# fff - fucking fast file-manager.

refresh() {
    printf '\e[?7l\e[?25l\e[2J\e[H'
    shopt -s checkwinsize; (:;:)
    ((LINES==0)) && read -r LINES COLUMNS < <(stty size)
    ((m=LINES-3,j=l>m/2?l>=c-m/2?c+1:l+m/2+1:m,k=k>=0?j-m:k,l=l>c?k:l))
}

get_dir() {
    d=(); f=()
    for p in "$PWD"/*; do [[ -d $p ]] && d+=("$p") || f+=("$p"); done
    f=("${d[@]}" "${f[@]}")
}

f_print() {
    c="${#f[@]}"
    for((i=${k:=0};i<(j=j>c?c:j);i++));{
        ((c<=0)) && { get_dir; f_print; return; } || path="${f[i]##*/}"
        [[ -d ${f[i]} ]] && path="\\e[1m\\e[3${FFF_COL1:-2}m${path}/"
        [[ ${f[i]} == "${f[l]}" ]] && path="\\e[7m${path}"
        [[ $co == "${f[i]}" ]] && path="\\e[1m\\e[3${FFF_COL3:-6}m\\e[7m${f[i]}"
        printf '\e[K%b\e[m\n' "$path"
    }
    printf '\e[3%sm\e[%s;H\e[K\n\e[K%b\e[m\e[H' "${FFF_COL2:-7}" "$((LINES-2))" \
           "${PWD/\/\//\/} (${l:-1}/$((c-1))) ${co:+${pr[*]}: ${co##*/} [p]}"
}

hist() {
    l2[((n=n<0?0:++n))]="$l:$k"
}

open() {
    if [[ -d ${1:-/} ]]; then
        l=0; refresh; PWD="${1:-/}"; get_dir; f_print

    elif [[ -f $1 ]]; then
        case "${1##*.}" in
            7z|a|apk|ar|bz2|cab|cpio|dmg|egg|gz|iso|jar|lha|mar|pea|rar|\
            rpm|s7z|shar|tar|tbz2|tgz|tlz|war|whl|xpi|zip|zipx|deb|xz|pak|\
            crx|exe|msi|bin|aac|aiff|ape|au|flac|gsm|it|m3u|m4a|mid|mod|mp3|\
            mpa|pls|ra|s3m|sid|wav|wma|xm|eot|otf|ttf|woff|woff2|3dm|3ds|max|\
            bmp|dds|gif|jpg|jpeg|png|ico|psd|xcf|tga|thm|tif|tiff|yuv|ai|eps|ps|\
            svg|dwg|dxf|gpx|kml|kmz|ods|xls|xlsx|ics|vcf|ppt|odp|3g2|3gp|aaf|\
            asf|avchd|avi|drc|flv|m2v|m4p|m4v|mkv|mng|mov|mp2|mp4|mpe|mpeg|\
            mpg|mpv|mxf|nsv|ogg|ogv|ogm|qt|rm|rmvb|roq|srt|svi|vob|webm|wmv|\
            doc|docx|ebook|msg|odt|pages|pdf|rtf|wpd|wps|part)
               nohup xdg-open "$1" >/dev/null 2>&1 &
            ;;

            *) "${EDITOR:-vi}" "$1"; printf '\e[?25l' ;;
        esac
    fi
}

prompt() {
    printf '\e[999B\e[?25h'
    case "${1: -1}" in
        r) read -rp "rename ${f[l]##*/}: "; [[ $REPLY ]] && \
           mv "${f[l]}" "$PWD/$REPLY" ;;
        d) read -n 1 -rp "trash ${f[l]##*/}? [y/n]: " y; [[ $y =~ y ]] && \
           mv "${f[l]}" ~/.cache/fff/bin/; ((l=l==0?l:--l)) ;;
        /) g="$PWD"; read -rp /; [[ $REPLY ]] && \
           f=("$PWD"/*"$REPLY"*); l=0; refresh; f_print; return
    esac
    refresh; get_dir
}

key() {
    case "${1: -1}" in
        C|l|"") hist; open "${f[l]}"; g= ;;
        D|h) open "${g:-${PWD%/*}}";
             [[ $g ]] || ((l=${l2[n]/:*},k=${l2[n--]/*:}))
             [[ $PWD == / ]] && l=0; g=; refresh ;;

        g) l=0; refresh ;;
        G) ((l=c-1)); refresh; ((k=k<0?0:k)) ;;
        .) a=(u s); shopt -"${a[((h=h>0?0:++h))]}" dotglob; refresh; get_dir ;;

        y) [[ $co != "${f[l]}" ]] && { co="${f[l]}"; pr=(cp -r); } || co= ;;
        m) [[ $co != "${f[l]}" ]] && { co="${f[l]}"; pr=(mv); } || co= ;;
        p) [[ $co ]] && "${pr[@]}" "$co" "$PWD" && { refresh; get_dir; co=; } ;;

        r|d|/) prompt "$1" ;;
        \~) g="$PWD"; hist; open ~/ ;;
        t)  g="$PWD"; hist; open ~/.cache/fff/bin ;;

        B|j) ((l=l==c-1?l:++l,j!=c&&l==j-m/2+1))&&((k=k>=j?k:++k,j=j<c?++j:j)) ;;
        A|k) ((l=l<1?l:--l,k>0&&l==k+m/2-2))&&((k=k<=j?k>0?--k:0:j,j=j>0?--j:j)) ;;

        q) exit;;
    esac
}

main() {
    shopt -s nocaseglob nullglob
    mkdir -p ~/.cache/fff/bin/
    refresh; get_dir

    trap $'printf "\033c"' EXIT
    trap  'refresh; f_print' SIGWINCH

    for ((;;)); { f_print; read -rs -n 1; key "$REPLY"; }
}

main "$@"
